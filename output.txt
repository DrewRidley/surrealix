Query string: "\n            SELECT * FROM user FETCH posts;\n       "
Query string: ["\n            SELECT * FROM user FETCH posts;\n       "]
Analyzing select statement: 
SelectStatement {
    expr: Fields(
        [
            All,
        ],
        false,
    ),
    omit: None,
    only: false,
    what: Values(
        [
            Table(
                Table(
                    "user",
                ),
            ),
        ],
    ),
    with: None,
    cond: None,
    split: None,
    group: None,
    order: None,
    limit: None,
    start: None,
    fetch: Some(
        Fetchs(
            [
                Fetch(
                    Idiom(
                        [
                            Field(
                                Ident(
                                    "posts",
                                ),
                            ),
                        ],
                    ),
                ),
            ],
        ),
    ),
    version: None,
    timeout: None,
    parallel: false,
    explain: None,
}

For SELECT query, constructed typed query: {
    "posts": TypedQuery {
        query_type: Array(
            Some(
                TypedQuery {
                    query_type: Scalar(
                        Record(
                            [
                                Table(
                                    "post",
                                ),
                            ],
                        ),
                    ),
                    perms: Permissions {
                        select: Full,
                        create: Full,
                        update: Full,
                        delete: Full,
                    },
                },
            ),
            None,
        ),
        perms: Permissions {
            select: Full,
            create: Full,
            update: Full,
            delete: Full,
        },
    },
    "height": TypedQuery {
        query_type: Scalar(
            Float,
        ),
        perms: Permissions {
            select: Full,
            create: Full,
            update: Full,
            delete: Full,
        },
    },
    "name": TypedQuery {
        query_type: Scalar(
            String,
        ),
        perms: Permissions {
            select: Full,
            create: Full,
            update: Full,
            delete: Full,
        },
    },
    "tags": TypedQuery {
        query_type: Array(
            Some(
                TypedQuery {
                    query_type: Scalar(
                        String,
                    ),
                    perms: Permissions {
                        select: Full,
                        create: Full,
                        update: Full,
                        delete: Full,
                    },
                },
            ),
            None,
        ),
        perms: Permissions {
            select: Full,
            create: Full,
            update: Full,
            delete: Full,
        },
    },
    "balance": TypedQuery {
        query_type: Scalar(
            Decimal,
        ),
        perms: Permissions {
            select: Full,
            create: Full,
            update: Full,
            delete: Full,
        },
    },
    "address": TypedQuery {
        query_type: Object(
            {
                "zip": TypedQuery {
                    query_type: Scalar(
                        Int,
                    ),
                    perms: Permissions {
                        select: Full,
                        create: Full,
                        update: Full,
                        delete: Full,
                    },
                },
                "street": TypedQuery {
                    query_type: Scalar(
                        String,
                    ),
                    perms: Permissions {
                        select: Full,
                        create: Full,
                        update: Full,
                        delete: Full,
                    },
                },
                "state": TypedQuery {
                    query_type: Scalar(
                        String,
                    ),
                    perms: Permissions {
                        select: Full,
                        create: Full,
                        update: Full,
                        delete: Full,
                    },
                },
                "city": TypedQuery {
                    query_type: Scalar(
                        String,
                    ),
                    perms: Permissions {
                        select: Full,
                        create: Full,
                        update: Full,
                        delete: Full,
                    },
                },
            },
        ),
        perms: Permissions {
            select: Full,
            create: Full,
            update: Full,
            delete: Full,
        },
    },
    "profile_picture": TypedQuery {
        query_type: Scalar(
            Bytes,
        ),
        perms: Permissions {
            select: Full,
            create: Full,
            update: Full,
            delete: Full,
        },
    },
    "age": TypedQuery {
        query_type: Scalar(
            Int,
        ),
        perms: Permissions {
            select: Full,
            create: Full,
            update: Full,
            delete: Full,
        },
    },
    "ssn": TypedQuery {
        query_type: Scalar(
            String,
        ),
        perms: Permissions {
            select: Full,
            create: Full,
            update: Full,
            delete: Full,
        },
    },
    "created_at": TypedQuery {
        query_type: Scalar(
            Datetime,
        ),
        perms: Permissions {
            select: Full,
            create: Full,
            update: Full,
            delete: Full,
        },
    },
}
#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use dotenv::dotenv;
use surrealix_macros::query;
fn main() {
    let myUser;
    let results = {
        struct PostsTypeItem {
            #[serde(rename = "created_at")]
            created_at: chrono::DateTime<chrono::Utc>,
            #[serde(rename = "title")]
            title: String,
            #[serde(rename = "author")]
            author: serde_json::Value,
            #[serde(rename = "content")]
            content: String,
        }
        struct AddressType {
            #[serde(rename = "zip")]
            zip: i64,
            #[serde(rename = "street")]
            street: String,
            #[serde(rename = "state")]
            state: String,
            #[serde(rename = "city")]
            city: String,
        }
        struct Query1ResultItem {
            #[serde(rename = "posts")]
            posts: Vec<PostsTypeItem>,
            #[serde(rename = "height")]
            height: f64,
            #[serde(rename = "name")]
            name: String,
            #[serde(rename = "tags")]
            tags: Vec<String>,
            #[serde(rename = "balance")]
            balance: serde_json::Value,
            #[serde(rename = "address")]
            address: AddressType,
            #[serde(rename = "profile_picture")]
            profile_picture: serde_json::Value,
            #[serde(rename = "age")]
            age: i64,
            #[serde(rename = "ssn")]
            ssn: String,
            #[serde(rename = "created_at")]
            created_at: chrono::DateTime<chrono::Utc>,
        }
        type Query1Result = Vec<Query1ResultItem>;
        type FinalQueryResult = Query1Result;
        ()
    };
}
